{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/CountryPicker/CountryPicker.js","components/Graph/Graph.js","components/Navbar/Navbar.js","App.js","index.js","components/Navbar/Navbar.module.css","components/CountryPicker/CountryPicker.module.css","components/Graph/Graph.module.css","App.module.css"],"names":["module","exports","Cards","data","total_cases","total_recovered","total_deaths","date","Date","className","styles","container","Grid","spacing","align","justify","item","xs","md","cx","card","infected","Typography","variant","start","end","duration","separator","toDateString","recovered","deaths","base","fetchData","country","a","changeableUrl","axios","get","countrydata","total_new_cases_today","total_new_deaths_today","results","console","log","fetchCountries","countryitems","Object","keys","map","index","name","title","id","code","fetchDailyData","timelineitems","dailyCases","new_daily_cases","dailyDeaths","new_daily_deaths","CountryPicker","handleCountryChange","useState","countryData","setCountryData","useEffect","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","value","i","key","Graph","dailyData","setDailyData","lineGraph","labels","datasets","label","borderColor","fill","backgroundColor","options","display","text","barGraph","legend","Navbar","AppBar","position","Toolbar","toolbar","header","font","theme","createMuiTheme","typography","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66e923c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"spacing\":\"Cards_spacing__3vt1U\",\"card\":\"Cards_card__eGUfZ\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid, Divider} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css'\r\nimport cx from 'classnames';\r\n\r\nfunction Cards({data: {total_cases, total_recovered, total_deaths}}) {\r\n    \r\n    const date = new Date();\r\n    \r\n    if(!total_cases) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={5} align=\"center\" justify=\"center\">\r\n                <Grid item xs={12} md={2} className={cx(styles.card, styles.infected)}>    \r\n                        <Typography variant=\"h6\"> Infected </Typography>\r\n                        <Typography className={styles.spacing} variant=\"h5\">\r\n                            [<CountUp start={0} end={total_cases} duration={2} separator=\",\"/>]\r\n                        </Typography>\r\n                        <Typography>{date.toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases for COVID-19</Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n                        <Typography variant=\"h6\"> Recovered </Typography>\r\n                        <Typography className={styles.spacing} variant=\"h5\">\r\n                            [<CountUp start={0} end={total_recovered} duration={2} separator=\",\"/>]\r\n                        </Typography>\r\n                        <Typography>{date.toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                </Grid>\r\n                  <Grid item xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n                        <Typography variant=\"h6\"> Deaths </Typography>\r\n                        <Typography className={styles.spacing} variant=\"h5\">\r\n                            [<CountUp start={0} end={total_deaths} duration={2} separator=\",\"/>]\r\n                        </Typography>\r\n                        <Typography>{date.toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst base = 'https://api.thevirustracker.com/free-api?';\r\n\r\nexport async function fetchData(country) {\r\n    let changeableUrl = `${base}global=stats`;\r\n\r\n    try {\r\n        if(country && country !== 'global') {\r\n            changeableUrl = `${base}countryTotal=${country}`;\r\n            \r\n            const {data: {countrydata: {0: { \r\n                total_cases,\r\n                total_recovered,\r\n                total_deaths,\r\n                total_new_cases_today,\r\n                total_new_deaths_today\r\n            }}}} = await axios.get(changeableUrl);\r\n\r\n            return {total_cases, total_recovered, total_deaths, total_new_cases_today, total_new_deaths_today};\r\n\r\n        } else {\r\n            const {data: {results: {0: { \r\n                total_cases,\r\n                total_recovered,\r\n                total_deaths,\r\n                total_new_cases_today,\r\n                total_new_deaths_today\r\n            }}}} = await axios.get(changeableUrl);\r\n\r\n            return {total_cases, total_recovered, total_deaths, total_new_cases_today, total_new_deaths_today};\r\n        }\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function fetchCountries() {\r\n    try{\r\n        const {data: {countryitems: { 0: country}}} = await axios.get(`${base}countryTotals=ALL`);\r\n        \r\n        return Object.keys(country).map((index) => new Object({name: country[index].title, id: country[index].code}));\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function fetchDailyData(country) {\r\n    try {\r\n        const{data: {timelineitems: { 0: item}}} = await axios.get(`${base}countryTimeline=${country}`);\r\n        return Object.keys(item).map((index) => new Object({date: index, dailyCases: item[index].new_daily_cases, dailyDeaths: item[index].new_daily_deaths}));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api'\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n\r\n    const [countryData, setCountryData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setCountryData(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setCountryData]);\r\n  \r\n    return(\r\n        <FormControl className={styles.container} variant=\"outlined\">\r\n            <NativeSelect defaultValue=\"global\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"global\">Global</option>\r\n                {countryData.map((country, i) => <option key={i} value={country.id}>{country.name}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Graph.module.css';\r\n\r\nfunction Graph({data:{total_new_cases_today, total_new_deaths_today}, country}) {\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            if(country && country !== 'global') setDailyData(await fetchDailyData(country));\r\n        }\r\n        fetchAPI();\r\n    }, [country]);\r\n\r\n    const lineGraph = (\r\n        (country && country !== 'global') ? (\r\n            <Line\r\n                data = {{\r\n                    labels: dailyData.map(({date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ dailyCases }) => dailyCases),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true \r\n                    }, {\r\n                        data: dailyData.map(({ dailyDeaths }) => dailyDeaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,.5)',\r\n                        fill: true \r\n                    }]\r\n                }}\r\n                options={{\r\n                    title: {display:true, text:`Today's Statistics for ${country}`}\r\n                }}\r\n            /> ) : null\r\n    );\r\n\r\n   \r\n    const barGraph = (\r\n        total_new_cases_today ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Deaths'], \r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                        data: [total_new_cases_today, total_new_deaths_today]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display:false},\r\n                    title: {display:true, text:`Today's Global Statistics`}\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {(country && country !== 'global')? lineGraph : barGraph}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import React from 'react';\r\nimport styles from './Navbar.module.css'\r\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\r\n\r\nfunction Navbar() {\r\n    return(\r\n        <AppBar className={styles.container} position=\"static\">\r\n            <Toolbar className={styles.toolbar}>\r\n                <Typography className={styles.header}>\r\n                    COVID-19 Tracker\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Cards from './components/Cards/Cards';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport Graph from './components/Graph/Graph';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {fetchData} from './api'\r\nimport styles from './App.module.css';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst font = \"'Lucida Console', Monaco, monospace\";\r\n\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n     \"fontFamily\": font,\r\n     \"fontSize\": 12,\r\n     \"fontWeightLight\": 300,\r\n     \"fontWeightRegular\": 400,\r\n     \"fontWeightMedium\": 500\r\n    },\r\n    NativeSelect: {\r\n     \"fontFamily\": font,\r\n     \"fontSize\": 12,\r\n     \"fontWeightLight\": 300,\r\n     \"fontWeightRegular\": 400,\r\n     \"fontWeightMedium\": 500\r\n    }\r\n });\r\n\r\nclass App extends React.Component {\r\n    \r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data:fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data:fetchedData, country:country});\r\n    }\r\n\r\n    render() {\r\n        const {data,country} = this.state;\r\n        return(\r\n            <MuiThemeProvider theme={theme}>\r\n                <div className={styles.container}>\r\n                    <Navbar/>\r\n                    <Cards data={data}/>\r\n                    <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                    <Graph data={data} country={country}/>\r\n                </div>\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/> , document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__1ESpZ\",\"toolbar\":\"Navbar_toolbar__1M85O\",\"header\":\"Navbar_header__73qvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__2vyxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Graph_container__1MSHm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}